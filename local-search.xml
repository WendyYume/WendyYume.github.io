<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>String vs StringBuilder vs StringBuffer</title>
    <link href="/Java/StringStringBuilderStringBuffer/"/>
    <url>/Java/StringStringBuilderStringBuffer/</url>
    
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>Java 中，String 是不可变的常量，由 final 修饰的 char 数组实现</p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    implement java.io.Serializable, Comparable&lt;String&gt;, CharSquence &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br>    &#125;<br>    ...<br></code></pre></td></tr></table></figure><p>String 不可变的原因：</p><ol><li>节省空间<br>字符串常量池是 Java 堆内存中一个特殊的存储区域，当创建一个 String 对象时，若此字符串值已存在于常量池中，则不会创建一个新的对象，而是引用已存在的对象</li><li>安全性<br>String 被许多 Java 类（库）用来当作参数。如：网络连接地址 URL、文件路径 path 等等。若 String 不是固定不变的将会引起各种安全隐患</li><li>String 对象的 hashcode<br>字符串不变保证了 hash 码的唯一性，因此可放心地进行缓存，这也是一种性能优化的手段，意味着不必每次都去计算新的哈希码</li></ol><p>而 StringBuffer、StringBuilder 支持可变字符串，底层数据结构为 char[] 数组</p><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>可变的字符序列</p><p>一般来说，<span class="label label-primary">StringBuffer</span> 和 StringBuilder 中更推荐使用 StringBuilder，因为后者通常更快，因为 StringBuffer 采用单线程<br>不过，StringBuilder 并没有 StringBuffer 那么安全，因为它使用的是多线程</p><p>StringBuilder 的常用方法是 append 和 insert。append 方法作用于字符串尾，而 insert 方法则可以指定插入位置<br>一般来说，如果 sb 指向一个 StringBuilder 实例，那么 sb.append(x) 和 sb.insert(sb.length(), x) 有着相同的作用</p><p>可以很自然的想到的是，每个 StringBuilder 实例都有其大小，只要字符串的大小不超过此空间，那就不会分配新的空间。反之，如果空间占用满了，StringBuilder 实例就会自动变大</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>一个线程安全的、可变的字符序列。类似于 StringBuilder</p><p>StringBuffer 可以安全地被多个线程使用</p><p>每当发生涉及源序列的操作（例如从源序列追加或插入）时，此类仅在执行操作的字符串缓冲区上同步，而不在源上同步</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>POJO vs JavaBean</title>
    <link href="/default/pojoVsBean/"/>
    <url>/default/pojoVsBean/</url>
    
    <content type="html"><![CDATA[<h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><p>POJO 的使用可以提高程序的可读性和重用性</p><p>一个 POJO 类<strong>不</strong>应该继承任何类、实现任何接口、被任何框架侵入</p><p>POJO 一般用于定义一个<strong>实体类</strong>。比如在你的程序中定义一个 Employee 类、一个 Student 类</p><blockquote><p>实体类是概念性的数据密集类。他们的主要目的是存储数据并提供对这些数据的访问。 在很多情况下，实体类是持久的，这意味着数据是长久存在的，并需要存储于文件或者数据库中<br>面向对象的静态建模和频繁用于逻辑数据库设计的实体关系建模的主要不同是，尽管两种方法都对类、类属性、类间关系建模， 但面向对象的静态建模还允许规定类的操作</p></blockquote><p>一个典型的 Student 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> grade;<br>    priavte String address;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> class;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span> <span class="hljs-params">(String name, <span class="hljs-type">int</span> class)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.class = class;<br>    &#125;<br>    <span class="hljs-comment">//省略对应的 getter、setter、toString 等方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>POJO 主要用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力</p><h4 id="Java-Bean"><a href="#Java-Bean" class="headerlink" title="Java Bean"></a>Java Bean</h4><p>所有的 JavaBean 都是 POJO，但并非所有 POJO 都是 JavaBean</p><table><thead><tr><th>POJO</th><th>Java Bean</th></tr></thead><tbody><tr><td></td><td>Java Bean 是特殊的 POJO</td></tr><tr><td>对成员变量没有约束</td><td>对成员变量有约束</td></tr><tr><td>可以实现 Serializable 接口</td><td>必须实现 Serializable 接口</td></tr><tr><td>可以通过字段名访问字段</td><td>只能通过 getter 和 setter 方法访问字段</td></tr><tr><td>字段可以为任何访问权限</td><td>字段只能由 private 修饰</td></tr><tr><td>不一定需要无参构造器</td><td>一定要有无参构造器</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
