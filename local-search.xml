<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>POJO vs JavaBean</title>
    <link href="/uncategorized/p"/>
    <url>/uncategorized/p</url>
    
    <content type="html"><![CDATA[<h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><p>POJO 的使用可以提高程序的可读性和重用性</p><p>一个 POJO 类<strong>不</strong>应该继承任何类、实现任何接口、被任何框架侵入</p><p>POJO 一般用于定义一个<strong>实体类</strong>。比如在你的程序中定义一个 Employee 类、一个 Student 类</p><blockquote><p>实体类是概念性的数据密集类。他们的主要目的是存储数据并提供对这些数据的访问。 在很多情况下，实体类是持久的，这意味着数据是长久存在的，并需要存储于文件或者数据库中<br>面向对象的静态建模和频繁用于逻辑数据库设计的实体关系建模的主要不同是，尽管两种方法都对类、类属性、类间关系建模， 但面向对象的静态建模还允许规定类的操作</p></blockquote><p>一个典型的 Student 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> grade;<br>    priavte String address;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> class;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span> <span class="hljs-params">(String name, <span class="hljs-type">int</span> class)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.class = class;<br>    &#125;<br>    <span class="hljs-comment">//省略对应的 getter、setter、toString 等方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>POJO 主要用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力</p><table><thead><tr><th>POJO</th><th>Java Bean</th></tr></thead><tbody><tr><td></td><td>Java Bean 是特殊的 POJO</td></tr><tr><td>对成员变量没有约束</td><td>对成员变量有约束</td></tr><tr><td>可以实现 Serializable 接口</td><td>必须实现 Serializable 接口</td></tr><tr><td>可以通过字段名访问字段</td><td>只能通过 getter 和 setter 方法访问字段</td></tr><tr><td>字段可以为任何访问权限</td><td>字段只能由 private 修饰</td></tr><tr><td>不一定需要无参构造器</td><td>一定要有无参构造器</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
